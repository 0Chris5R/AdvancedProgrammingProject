import React, { useState, useEffect } from 'react'; // Import useEffect
import GoalList from '../goals/GoalList';
import GoalForm from '../goals/GoalForm';
import Modal from '../common/Modal'; 

// Define the base URL for your backend API
const API_BASE_URL = 'http://localhost:8000'; // Adjust if your backend runs on a different port or host

const GoalsPage = () => {
  const [showGoalModal, setShowGoalModal] = useState(false);
  const [editingGoal, setEditingGoal] = useState(null);
  const [goals, setGoals] = useState([]); // Initialize goals as an empty array
  const [loading, setLoading] = useState(true); // Add loading state
  const [error, setError] = useState(null); // Add error state

  // Function to fetch goals from the backend
  const fetchGoals = async () => {
    setLoading(true);
    setError(null); // Clear previous errors
    try {
      const response = await fetch(`${API_BASE_URL}/goals/`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setGoals(data);
    } catch (error) {
      console.error("Error fetching goals:", error);
      setError("Failed to fetch goals. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  // Fetch goals when the component mounts
  useEffect(() => {
    fetchGoals();
  }, []); // Empty dependency array means this runs once on mount

  const openAddGoalModal = () => {
    setEditingGoal(null); // Ensure editingGoal is null for adding
    setShowGoalModal(true);
  };

  const openEditGoalModal = (goal) => {
    setEditingGoal(goal); // Set the goal to be edited
    setShowGoalModal(true);
  };

  const handleSaveGoal = async (goalToSave) => {
    setError(null); // Clear previous errors
    try {
      let response;
      let method;
      let url;

      // Determine if we are creating or updating
      if (goalToSave.id) {
        // Update existing goal
        method = 'PUT';
        url = `${API_BASE_URL}/goals/${goalToSave.id}`;
        // For PUT, send the updated data including progress
        response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(goalToSave), // Send the entire goal object
        });
      } else {
        // Add new goal
        method = 'POST';
        url = `${API_BASE_URL}/goals/`;
         // For POST, exclude the ID as it's generated by the backend
         const { id, progress, ...goalDataForCreate } = goalToSave;
        response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(goalDataForCreate), // Send data without the temporary ID
        });
      }

      if (!response.ok) {
         const errorData = await response.json();
         throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || response.statusText}`);
      }

      // After saving, refetch the goals to update the list
      fetchGoals();
      closeModal(); // Close modal after saving

    } catch (error) {
      console.error("Error saving goal:", error);
      setError(`Failed to save goal: ${error.message}`);
    }
  };

  const handleDeleteGoal = async (goalId) => {
    if (window.confirm("Are you sure you want to delete this goal?")) {
      setError(null); // Clear previous errors
      try {
        const response = await fetch(`${API_BASE_URL}/goals/${goalId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
           const errorData = await response.json();
           throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || response.statusText}`);
        }

        // After deleting, refetch the goals to update the list
        fetchGoals();

      } catch (error) {
        console.error("Error deleting goal:", error);
        setError(`Failed to delete goal: ${error.message}`);
      }
    }
  };

  const closeModal = () => {
    setShowGoalModal(false);
    setEditingGoal(null); // Clear editingGoal when modal closes
    setError(null); // Clear error when modal closes
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900">My Goals & Priorities</h1>
        <button
          onClick={openAddGoalModal}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          New Goal
        </button>
      </div>

      {/* Display loading, error, or goals list */}
      {loading && <p className="text-center text-gray-500 italic">Loading goals...</p>}
      {error && <p className="text-center text-red-500 italic">Error: {error}</p>}
      {!loading && !error && (
        <GoalList
          goals={goals}
          onEditGoal={openEditGoalModal}
          onDeleteGoal={handleDeleteGoal}
        />
      )}


      {/* Modal for Add/Edit Goal - Renders only when showGoalModal is true */}
      {showGoalModal && (
        <Modal title={editingGoal ? "Edit Goal" : "Create New Goal"} onClose={closeModal}>
          <GoalForm
            onClose={closeModal}
            onSave={handleSaveGoal} // Pass the save handler
            editGoal={editingGoal}
          />
        </Modal>
      )}
    </div>
  );
};

export default GoalsPage;
